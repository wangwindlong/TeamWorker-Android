package cn.chestnut.mvvm.teamworker.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.chestnut.mvvm.teamworker.module.massage.bean.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property ChatId = new Property(2, String.class, "chatId", false, "CHAT_ID");
        public final static Property ChatName = new Property(3, String.class, "chatName", false, "CHAT_NAME");
        public final static Property SenderId = new Property(4, String.class, "senderId", false, "SENDER_ID");
        public final static Property ReceiverId = new Property(5, String.class, "receiverId", false, "RECEIVER_ID");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(8, Long.class, "time", false, "TIME");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" TEXT UNIQUE ," + // 1: messageId
                "\"CHAT_ID\" TEXT," + // 2: chatId
                "\"CHAT_NAME\" TEXT," + // 3: chatName
                "\"SENDER_ID\" TEXT NOT NULL ," + // 4: senderId
                "\"RECEIVER_ID\" TEXT," + // 5: receiverId
                "\"TITLE\" TEXT," + // 6: title
                "\"CONTENT\" TEXT NOT NULL ," + // 7: content
                "\"TIME\" INTEGER NOT NULL );"); // 8: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String chatId = entity.getChatId();
        if (chatId != null) {
            stmt.bindString(3, chatId);
        }
 
        String chatName = entity.getChatName();
        if (chatName != null) {
            stmt.bindString(4, chatName);
        }
        stmt.bindString(5, entity.getSenderId());
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(6, receiverId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
        stmt.bindString(8, entity.getContent());
        stmt.bindLong(9, entity.getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String chatId = entity.getChatId();
        if (chatId != null) {
            stmt.bindString(3, chatId);
        }
 
        String chatName = entity.getChatName();
        if (chatName != null) {
            stmt.bindString(4, chatName);
        }
        stmt.bindString(5, entity.getSenderId());
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(6, receiverId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
        stmt.bindString(8, entity.getContent());
        stmt.bindLong(9, entity.getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chatId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chatName
            cursor.getString(offset + 4), // senderId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // receiverId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.getString(offset + 7), // content
            cursor.getLong(offset + 8) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChatId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChatName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSenderId(cursor.getString(offset + 4));
        entity.setReceiverId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContent(cursor.getString(offset + 7));
        entity.setTime(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
